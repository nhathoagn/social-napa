{"ast":null,"code":"import { MESS_TYPES } from '../actions/messageAction';\nimport { EditData, DeleteData } from '../actions/globalTypes';\nconst initialState = {\n  users: [],\n  resultUsers: 0,\n  data: [],\n  firstLoad: false\n};\n\nconst messageReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case MESS_TYPES.ADD_USER:\n      if (state.users.every(item => item._id !== action.payload._id)) {\n        return { ...state,\n          users: [action.payload, ...state.users]\n        };\n      }\n\n      return state;\n\n    case MESS_TYPES.ADD_MESSAGE:\n      return { ...state,\n        data: state.data.map(item => item._id === action.payload.recipient || item._id === action.payload.sender ? { ...item,\n          messages: [...item.messages, action.payload],\n          result: item.result + 1\n        } : item),\n        users: state.users.map(user => user._id === action.payload.recipient || user._id === action.payload.sender ? { ...user,\n          text: action.payload.text,\n          media: action.payload.media,\n          call: action.payload.call\n        } : user)\n      };\n\n    case MESS_TYPES.GET_CONVERSATIONS:\n      return { ...state,\n        users: action.payload.newArr,\n        resultUsers: action.payload.result,\n        firstLoad: true\n      };\n\n    case MESS_TYPES.GET_MESSAGES:\n      return { ...state,\n        data: [...state.data, action.payload]\n      };\n\n    case MESS_TYPES.UPDATE_MESSAGES:\n      return { ...state,\n        data: EditData(state.data, action.payload._id, action.payload)\n      };\n\n    case MESS_TYPES.DELETE_MESSAGES:\n      return { ...state,\n        data: state.data.map(item => item._id === action.payload._id ? { ...item,\n          messages: action.payload.newData\n        } : item)\n      };\n\n    case MESS_TYPES.DELETE_CONVERSATION:\n      return { ...state,\n        users: DeleteData(state.users, action.payload),\n        data: DeleteData(state.data, action.payload)\n      };\n\n    case MESS_TYPES.CHECK_ONLINE_OFFLINE:\n      return { ...state,\n        users: state.users.map(user => action.payload.includes(user._id) ? { ...user,\n          online: true\n        } : { ...user,\n          online: false\n        })\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default messageReducer;","map":{"version":3,"sources":["/home/nhathoang/Documents/MERN-Stack-Build-a-social-media-app/client/src/redux/reducers/messageReducer.js"],"names":["MESS_TYPES","EditData","DeleteData","initialState","users","resultUsers","data","firstLoad","messageReducer","state","action","type","ADD_USER","every","item","_id","payload","ADD_MESSAGE","map","recipient","sender","messages","result","user","text","media","call","GET_CONVERSATIONS","newArr","GET_MESSAGES","UPDATE_MESSAGES","DELETE_MESSAGES","newData","DELETE_CONVERSATION","CHECK_ONLINE_OFFLINE","includes","online"],"mappings":"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","sourcesContent":["import { MESS_TYPES } from '../actions/messageAction'\nimport { EditData, DeleteData } from '../actions/globalTypes'\n\nconst initialState = {\n    users: [],\n    resultUsers: 0,\n    data: [],\n    firstLoad: false\n}\n\nconst messageReducer = (state = initialState, action) => {\n    switch (action.type){\n        case MESS_TYPES.ADD_USER:\n            if(state.users.every(item => item._id !== action.payload._id)){\n                return {\n                    ...state,\n                    users: [action.payload, ...state.users]\n                };\n            }\n            return state;\n        case MESS_TYPES.ADD_MESSAGE:\n            return {\n                ...state,\n                data: state.data.map(item => \n                    item._id === action.payload.recipient || item._id === action.payload.sender \n                    ? {\n                        ...item,\n                        messages: [...item.messages, action.payload],\n                        result: item.result + 1\n                    }\n                    : item\n                ),\n                users: state.users.map(user => \n                    user._id === action.payload.recipient || user._id === action.payload.sender\n                    ? {\n                        ...user, \n                        text: action.payload.text, \n                        media: action.payload.media,\n                        call: action.payload.call\n                    }\n                    : user\n                )\n            };\n        case MESS_TYPES.GET_CONVERSATIONS:\n            return {\n                ...state,\n                users: action.payload.newArr,\n                resultUsers: action.payload.result,\n                firstLoad: true\n            };\n        case MESS_TYPES.GET_MESSAGES:\n            return {\n                ...state,\n                data: [...state.data, action.payload]\n            };\n        case MESS_TYPES.UPDATE_MESSAGES:\n            return {\n                ...state,\n                data: EditData(state.data, action.payload._id, action.payload)\n            };\n        case MESS_TYPES.DELETE_MESSAGES:\n            return {\n                ...state,\n                data: state.data.map(item => \n                    item._id === action.payload._id\n                    ? {...item, messages: action.payload.newData}\n                    : item\n                )\n            };\n        case MESS_TYPES.DELETE_CONVERSATION:\n            return {\n                ...state,\n                users: DeleteData(state.users, action.payload),\n                data: DeleteData(state.data, action.payload)\n            };\n        case MESS_TYPES.CHECK_ONLINE_OFFLINE:\n            return {\n                ...state,\n                users: state.users.map(user => \n                    action.payload.includes(user._id)\n                    ? {...user, online: true}\n                    : {...user, online: false}\n                )\n            };\n        default:\n            return state;\n    }\n}\n\nexport default messageReducer;"]},"metadata":{},"sourceType":"module"}